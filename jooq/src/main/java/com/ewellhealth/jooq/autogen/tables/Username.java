/*
 * This file is generated by jOOQ.
*/
package com.ewellhealth.jooq.autogen.tables;


import com.ewellhealth.jooq.autogen.Indexes;
import com.ewellhealth.jooq.autogen.Jooq;
import com.ewellhealth.jooq.autogen.Keys;
import com.ewellhealth.jooq.autogen.tables.records.UsernameRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Username extends TableImpl<UsernameRecord> {

    private static final long serialVersionUID = -1189184319;

    /**
     * The reference instance of <code>jooq.username</code>
     */
    public static final Username USERNAME = new Username();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsernameRecord> getRecordType() {
        return UsernameRecord.class;
    }

    /**
     * The column <code>jooq.username.id</code>.
     */
    public final TableField<UsernameRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jooq.username.name</code>.
     */
    public final TableField<UsernameRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>jooq.username.address</code>.
     */
    public final TableField<UsernameRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>jooq.username</code> table reference
     */
    public Username() {
        this(DSL.name("username"), null);
    }

    /**
     * Create an aliased <code>jooq.username</code> table reference
     */
    public Username(String alias) {
        this(DSL.name(alias), USERNAME);
    }

    /**
     * Create an aliased <code>jooq.username</code> table reference
     */
    public Username(Name alias) {
        this(alias, USERNAME);
    }

    private Username(Name alias, Table<UsernameRecord> aliased) {
        this(alias, aliased, null);
    }

    private Username(Name alias, Table<UsernameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jooq.JOOQ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERNAME_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsernameRecord> getPrimaryKey() {
        return Keys.KEY_USERNAME_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsernameRecord>> getKeys() {
        return Arrays.<UniqueKey<UsernameRecord>>asList(Keys.KEY_USERNAME_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Username as(String alias) {
        return new Username(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Username as(Name alias) {
        return new Username(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Username rename(String name) {
        return new Username(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Username rename(Name name) {
        return new Username(name, null);
    }
}
